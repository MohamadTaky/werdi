generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  ownedGroups          Group[]               @relation(name: "ownedGroups")
  groups               Group[]
  userWerds            UserWerd[]
  groupWerdCompletions GroupWerdCompletion[]
  groupWerdStreaks     GroupWerdStreak[]
}

model Group {
  id         String      @id @default(cuid())
  name       String
  admin      User        @relation(name: "ownedGroups", fields: [adminId], references: [id])
  adminId    String
  members    User[]
  werds GroupWerd[]

  @@index([adminId])
}

model Werd {
  id        String     @id @default(cuid())
  text      String
  count     Int
  userWerd  UserWerd?
  GroupWerd GroupWerd?
  createdAt DateTime   @default(now())
}

model UserWerd {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  werd            Werd         @relation(fields: [werdId], references: [id])
  werdId          String       @unique
  completions     Completion[]
  streak          Streak       @relation(fields: [streakId], references: [id])
  streakId        String       @unique
  completed       Boolean      @default(false)
  lastCompletedAt DateTime?

  @@index([userId])
  @@index([werdId])
}

model GroupWerd {
  id          String                @id @default(cuid())
  group       Group                 @relation(fields: [groupId], references: [id])
  groupId     String
  werd        Werd                  @relation(fields: [werdId], references: [id])
  werdId      String                @unique
  completions GroupWerdCompletion[]
  streaks     GroupWerdStreak[]

  @@index([groupId])
  @@index([werdId])
}

model Completion {
  id                  String               @id @default(cuid())
  count               Int
  completedAt         DateTime             @default(now())
  werd                UserWerd?            @relation(fields: [werdId], references: [id])
  werdId              String?
  groupWerdCompletion GroupWerdCompletion?

  @@index([werdId])
}

model GroupWerdCompletion {
  id           String     @id @default(cuid())
  groupWerd    GroupWerd  @relation(fields: [groupWerdId], references: [id])
  groupWerdId  String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  completion   Completion @relation(fields: [completionId], references: [id])
  completionId String     @unique

  @@index([groupWerdId])
  @@index([userId])
  @@index([completionId])
}

model Streak {
  id              String           @id @default(cuid())
  currentStreak   Int              @default(0)
  longestStreak   Int              @default(0)
  userWerd        UserWerd?
  groupWerdStreak GroupWerdStreak?
}

model GroupWerdStreak {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  streak      Streak    @relation(fields: [streakId], references: [id])
  streakId    String    @unique
  GroupWerd   GroupWerd @relation(fields: [groupWerdId], references: [id])
  groupWerdId String

  @@index([userId])
  @@index([streakId])
  @@index([groupWerdId])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
