generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  ownedGroups          Group[]               @relation(name: "ownedGroups")
  groups               Group[]
  werds                Werd[]
  groupWerdCompletions GroupWerdCompletion[]
  groupWerdStreaks     GroupWerdStreak[]
}

model Group {
  id      String      @id @default(cuid())
  name    String      @unique
  admin   User        @relation(name: "ownedGroups", fields: [adminId], references: [id])
  adminId String
  members User[]
  werds   GroupWerd[]

  @@index([adminId])
}

model Werd {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  lastCompletedAt DateTime?
  completions     WerdCompletion[]
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  text            String
  count           Int
  currentStreak   Int              @default(0)
  longestStreak   Int              @default(0)
  completed       Boolean          @default(false)

  @@unique([userId, text])
  @@index([userId])
}

model WerdCompletion {
  id          String   @id @default(cuid())
  werd        Werd     @relation(fields: [werdId], references: [id], onDelete: Cascade)
  werdId      String
  completedAt DateTime @default(now())
  count       Int

  @@unique([werdId, completedAt])
  @@index([werdId])
}

model GroupWerd {
  id          String                @id @default(cuid())
  createdAt   DateTime              @default(now())
  completions GroupWerdCompletion[]
  streaks     GroupWerdStreak[]
  group       Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  text        String
  count       Int

  @@unique([groupId, text])
  @@index([groupId])
}

model GroupWerdCompletion {
  id          String    @id @default(cuid())
  groupWerd   GroupWerd @relation(fields: [groupWerdId], references: [id], onDelete: Cascade)
  groupWerdId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  count       Int
  completedAt DateTime  @default(now())

  @@unique([groupWerdId, userId, completedAt])
  @@index([groupWerdId])
  @@index([userId])
}

model GroupWerdStreak {
  id              String    @id @default(cuid())
  GroupWerd       GroupWerd @relation(fields: [groupWerdId], references: [id], onDelete: Cascade)
  groupWerdId     String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  lastCompletedAt DateTime?
  currentStreak   Int       @default(1)
  longestStreak   Int       @default(1)

  @@unique([groupWerdId, userId])
  @@index([userId])
  @@index([groupWerdId])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
